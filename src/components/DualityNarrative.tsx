import React, { useState } from 'react';
import type { LinearProgram } from '@/components/types';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { ChevronRight, ChevronLeft, Factory, Package, DollarSign, TrendingUp, BarChart3, ArrowRight, ArrowDown } from 'lucide-react';

interface DualityNarrativeProps {
  primal: LinearProgram;
  dual: LinearProgram;
}

export const DualityNarrative: React.FC<DualityNarrativeProps> = ({ primal, dual }) => {
  const [currentChapter, setCurrentChapter] = useState(0);
  
  // Create narrative based on the specific problem
  const narrative = createNarrative(primal, dual);
  
  const chapter = narrative.chapters[currentChapter];
  
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>A Hist√≥ria da Dualidade: {narrative.title}</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Progress indicator */}
        <div className="flex items-center justify-center space-x-2">
          {narrative.chapters.map((_, index) => (
            <div
              key={index}
              className={`h-2 transition-all duration-300 ${
                index === currentChapter ? 'w-8 bg-blue-600' : 'w-2 bg-gray-300'
              } rounded-full cursor-pointer`}
              onClick={() => setCurrentChapter(index)}
            />
          ))}
        </div>
        
        {/* Chapter content */}
        <div className="min-h-[400px] space-y-6">
          <div className="text-center">
            <h3 className="text-xl font-semibold mb-2">{chapter.title}</h3>
            <p className="text-gray-600">{chapter.subtitle}</p>
          </div>
          
          {/* Visualization specific to this chapter */}
          <div className="bg-gray-50 rounded-lg p-6">
            <ChapterVisualization
              chapter={chapter}
              primal={primal}
              dual={dual}
              chapterIndex={currentChapter}
            />
          </div>
          
          {/* Narrative text */}
          <div className="prose prose-sm max-w-none">
            <p className="text-gray-700 leading-relaxed">{chapter.narrative}</p>
          </div>
          
          {/* Key insight */}
          {chapter.insight && (
            <div className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded">
              <p className="font-semibold text-blue-900 mb-1">üí° Insight Principal</p>
              <p className="text-blue-800">{chapter.insight}</p>
            </div>
          )}
        </div>
        
        {/* Navigation */}
        <div className="flex justify-between items-center pt-4">
          <Button
            variant="outline"
            onClick={() => setCurrentChapter(Math.max(0, currentChapter - 1))}
            disabled={currentChapter === 0}
          >
            <ChevronLeft className="w-4 h-4 mr-2" />
            Anterior
          </Button>
          
          <span className="text-sm text-gray-500">
            Cap√≠tulo {currentChapter + 1} de {narrative.chapters.length}
          </span>
          
          <Button
            variant="outline"
            onClick={() => setCurrentChapter(Math.min(narrative.chapters.length - 1, currentChapter + 1))}
            disabled={currentChapter === narrative.chapters.length - 1}
          >
            Pr√≥ximo
            <ChevronRight className="w-4 h-4 ml-2" />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

// Create narrative based on problem type
function createNarrative(primal: LinearProgram, dual: LinearProgram): Narrative {
  const isMaximization = primal.isMaximization;
  const numVariables = primal.variables.length;
  const numConstraints = primal.constraints.length;
  
  // All narratives now include conversion calculations as first chapters
  const conversionChapters: Chapter[] = [
    {
      title: "Regras de Convers√£o Primal-Dual",
      subtitle: "Fundamentos te√≥ricos da dualidade",
      narrative: `A teoria da dualidade estabelece que todo problema de programa√ß√£o linear possui um problema dual correspondente. ${isMaximization ? 'Como temos um problema de MAXIMIZA√á√ÉO, o dual ser√° de MINIMIZA√á√ÉO.' : 'Como temos um problema de MINIMIZA√á√ÉO, o dual ser√° de MAXIMIZA√á√ÉO.'} Esta rela√ß√£o n√£o √© arbitr√°ria - ela reflete uma profunda simetria matem√°tica.`,
      visualization: 'conversion-rules',
      insight: "Primal MAX ‚Üî Dual MIN | Primal MIN ‚Üî Dual MAX"
    },
    {
      title: "Passo 1: Vari√°veis Duais",
      subtitle: "Uma vari√°vel dual para cada restri√ß√£o primal",
      narrative: `O problema primal tem ${numConstraints} restri√ß√µes, ent√£o o dual ter√° ${numConstraints} vari√°veis: ${dual.variables.join(', ')}. Cada vari√°vel dual representa o "pre√ßo sombra" ou "valor marginal" da restri√ß√£o correspondente.`,
      visualization: 'dual-variables',
      insight: `${numConstraints} restri√ß√µes primais ‚Üí ${numConstraints} vari√°veis duais`
    },
    {
      title: "Passo 2: Fun√ß√£o Objetivo Dual",
      subtitle: "RHS das restri√ß√µes primais ‚Üí Coeficientes do objetivo dual",
      narrative: `Os coeficientes da fun√ß√£o objetivo dual v√™m dos valores do lado direito (RHS) das restri√ß√µes primais. Temos: ${primal.constraints.map((c, i) => `RHS${i+1} = ${c.rhs}`).join(', ')}. Portanto, a fun√ß√£o objetivo dual √©: ${dual.isMaximization ? 'Maximizar' : 'Minimizar'} ${dual.objective.map((c, i) => `${c}y${i+1}`).join(' + ')}.`,
      visualization: 'objective-conversion',
      insight: "Os recursos dispon√≠veis no primal se tornam os coeficientes a otimizar no dual"
    },
    {
      title: "Passo 3: Restri√ß√µes Duais",
      subtitle: "Uma restri√ß√£o dual para cada vari√°vel primal",
      narrative: `O problema primal tem ${numVariables} vari√°veis, ent√£o o dual ter√° ${numVariables} restri√ß√µes. Cada restri√ß√£o dual √© formada pelos coeficientes da coluna correspondente na matriz primal. ${isMaximization ? 'Como o primal √© MAX, as restri√ß√µes duais ser√£o ‚â•.' : 'Como o primal √© MIN, as restri√ß√µes duais ser√£o ‚â§.'}`,
      visualization: 'constraints-conversion',
      insight: `${numVariables} vari√°veis primais ‚Üí ${numVariables} restri√ß√µes duais`
    },
    {
      title: "Passo 4: Sinais e Restri√ß√µes",
      subtitle: "Regras de convers√£o para tipos de restri√ß√µes",
      narrative: `As regras de convers√£o dependem do tipo de cada restri√ß√£o e vari√°vel:\n` +
        primal.constraints.map((c, i) => {
          if (c.operator === '<=') return `‚Ä¢ Restri√ß√£o ${i+1} (‚â§): y${i+1} ‚â• 0`;
          if (c.operator === '>=') return `‚Ä¢ Restri√ß√£o ${i+1} (‚â•): y${i+1} ‚â§ 0`;
          return `‚Ä¢ Restri√ß√£o ${i+1} (=): y${i+1} irrestrita`;
        }).join('\n'),
      visualization: 'sign-rules',
      insight: "‚â§ ‚Üí dual ‚â• 0 | ‚â• ‚Üí dual ‚â§ 0 | = ‚Üí dual irrestrita"
    }
  ];
  
  // Detect problem type based on structure
  const problemType = detectProblemType(primal);
  
  // Get problem-specific chapters
  let specificChapters: Chapter[] = [];
  switch (problemType) {
    case 'production':
      specificChapters = createProductionChapters(primal);
      break;
    case 'diet':
      specificChapters = createDietChapters(primal);
      break;
    default:
      specificChapters = createGenericChapters();
  }
  
  // Add theorem chapters at the end
  const theoremChapters: Chapter[] = [
    {
      title: "Teorema da Dualidade Fraca",
      subtitle: "Limitantes entre primal e dual",
      narrative: `Para qualquer solu√ß√£o vi√°vel x do primal e y do dual: ${isMaximization ? 'cx ‚â§ yb' : 'cx ‚â• yb'}. Isso significa que ${isMaximization ? 'qualquer solu√ß√£o dual vi√°vel fornece um limite superior para o primal' : 'qualquer solu√ß√£o dual vi√°vel fornece um limite inferior para o primal'}. Este teorema √© fundamental para algoritmos de otimiza√ß√£o.`,
      visualization: 'weak-duality',
      insight: "Solu√ß√µes vi√°veis do dual limitam o valor √≥timo do primal"
    },
    {
      title: "Teorema da Dualidade Forte",
      subtitle: "Igualdade no √≥timo",
      narrative: `Se o primal tem solu√ß√£o √≥tima x*, ent√£o o dual tem solu√ß√£o √≥tima y* e cx* = y*b. Esta igualdade profunda significa que resolver um problema √© equivalente a resolver o outro. No nosso caso, quando encontrarmos as solu√ß√µes √≥timas, seus valores objetivos ser√£o id√™nticos.`,
      visualization: 'strong-duality',
      insight: "No √≥timo: valor primal = valor dual (sempre!)"
    },
    {
      title: "Folga Complementar",
      subtitle: "Rela√ß√£o entre vari√°veis e restri√ß√µes",
      narrative: `A condi√ß√£o de folga complementar estabelece rela√ß√µes "tudo ou nada":\n` +
        `‚Ä¢ Se uma vari√°vel primal √© positiva, a restri√ß√£o dual correspondente √© ativa (sem folga)\n` +
        `‚Ä¢ Se uma restri√ß√£o primal tem folga, a vari√°vel dual correspondente √© zero\n` +
        `Esta propriedade conecta intimamente as solu√ß√µes primal e dual.`,
      visualization: 'complementary-slackness',
      insight: "Atividade econ√¥mica s√≥ ocorre onde h√° escassez"
    }
  ];
  
  return {
    title: getProblemTitle(problemType),
    problemContext: getProblemContext(problemType, primal),
    chapters: [...conversionChapters, ...specificChapters, ...theoremChapters]
  };
}

// Detect problem type from structure
function detectProblemType(primal: LinearProgram): string {
  if (primal.isMaximization && primal.constraints.every(c => c.operator === '<=')) {
    return 'production';
  } else if (!primal.isMaximization && primal.constraints.every(c => c.operator === '>=')) {
    return 'diet';
  } else if (primal.constraints.some(c => c.operator === '=')) {
    return 'transportation';
  }
  return 'generic';
}

// Helper functions to get title and context
function getProblemTitle(type: string): string {
  switch (type) {
    case 'production': return "Problema de Produ√ß√£o";
    case 'diet': return "Problema da Dieta";
    case 'transportation': return "Problema de Transporte";
    default: return "Problema de Otimiza√ß√£o";
  }
}

function getProblemContext(type: string, primal: LinearProgram): string {
  switch (type) {
    case 'production': 
      return "Uma empresa precisa decidir quanto produzir de cada produto para maximizar o lucro, respeitando limita√ß√µes de recursos.";
    case 'diet': 
      return "Encontrar a combina√ß√£o mais barata de alimentos que atenda aos requisitos nutricionais m√≠nimos.";
    case 'transportation': 
      return "Otimizar o fluxo de produtos entre origens e destinos, respeitando capacidades e demandas.";
    default: 
      return `${primal.isMaximization ? 'Maximizar' : 'Minimizar'} um objetivo sujeito a restri√ß√µes lineares.`;
  }
}

// Production problem chapters
function createProductionChapters(primal: LinearProgram): Chapter[] {
  return [
    {
      title: "Interpreta√ß√£o Econ√¥mica",
      subtitle: "O mercado de recursos",
      narrative: `Imagine uma f√°brica que produz ${primal.variables.length} produtos. Um investidor quer comprar todos os recursos da f√°brica. Quanto deve pagar por cada recurso? Os pre√ßos devem ser competitivos - altos o suficiente para compensar o lucro perdido, mas m√≠nimos para o comprador.`,
      visualization: 'economic-interpretation',
      insight: "O dual representa a perspectiva do comprador de recursos"
    },
    {
      title: "An√°lise dos Pre√ßos Sombra",
      subtitle: "Valor marginal dos recursos",
      narrative: `Cada vari√°vel dual (y‚ÇÅ, y‚ÇÇ, ...) representa o pre√ßo sombra de um recurso - quanto o lucro aumentaria com uma unidade adicional daquele recurso. Recursos totalmente utilizados t√™m pre√ßos sombra positivos; recursos com sobra t√™m pre√ßo zero.`,
      visualization: 'shadow-price-analysis',
      insight: "Pre√ßo sombra = Œî lucro / Œî recurso"
    }
  ];
}

// Diet problem chapters
function createDietChapters(primal: LinearProgram): Chapter[] {
  return [
    {
      title: "Interpreta√ß√£o Nutricional",
      subtitle: "Precificando nutrientes",
      narrative: `Voc√™ precisa ${primal.variables.length} alimentos para atender ${primal.constraints.length} requisitos nutricionais. Um vendedor de suplementos quer oferecer cada nutriente puro. Os pre√ßos dos suplementos devem ser competitivos com os alimentos, sen√£o ningu√©m compraria.`,
      visualization: 'economic-interpretation',
      insight: "O dual representa o problema de precificar nutrientes"
    },
    {
      title: "Valor dos Nutrientes",
      subtitle: "Pre√ßo impl√≠cito de cada nutriente",
      narrative: `As vari√°veis duais revelam quanto voc√™ pagaria por flexibilidade em cada requisito nutricional. Nutrientes escassos (restri√ß√µes ativas) t√™m pre√ßos positivos; nutrientes abundantes t√™m pre√ßo zero.`,
      visualization: 'shadow-price-analysis',
      insight: "Pre√ßo do nutriente = economia por unidade de flexibilidade"
    }
  ];
}

// Generic problem chapters
function createGenericChapters(): Chapter[] {
  return [
    {
      title: "Interpreta√ß√£o Geral",
      subtitle: "Perspectivas complementares",
      narrative: `O problema dual oferece uma vis√£o alternativa: em vez de otimizar diretamente as vari√°veis de decis√£o, atribu√≠mos valores √†s restri√ß√µes. Estes valores devem ser competitivos com a solu√ß√£o direta.`,
      visualization: 'economic-interpretation',
      insight: "Primal: decis√µes diretas | Dual: valor das restri√ß√µes"
    },
    {
      title: "An√°lise de Sensibilidade",
      subtitle: "Impacto de mudan√ßas",
      narrative: `Os pre√ßos sombra (vari√°veis duais) indicam como o valor √≥timo muda quando relaxamos restri√ß√µes. Esta informa√ß√£o √© crucial para decis√µes de investimento e planejamento.`,
      visualization: 'shadow-price-analysis',
      insight: "Pre√ßos sombra guiam decis√µes de expans√£o"
    }
  ];
}

// Visualization component for each chapter
const ChapterVisualization: React.FC<{
  chapter: Chapter;
  primal: LinearProgram;
  dual: LinearProgram;
  chapterIndex: number;
}> = ({ chapter, primal, dual }) => {
  switch (chapter.visualization) {
    // Conversion steps
    case 'conversion-rules':
      return <ConversionRulesViz primal={primal} dual={dual} />;
    case 'dual-variables':
      return <DualVariablesViz primal={primal} dual={dual} />;
    case 'objective-conversion':
      return <ObjectiveConversionViz primal={primal} dual={dual} />;
    case 'constraints-conversion':
      return <ConstraintsConversionViz primal={primal} dual={dual} />;
    case 'sign-rules':
      return <SignRulesViz primal={primal} dual={dual} />;
    
    // Problem-specific visualizations
    case 'economic-interpretation':
      return <EconomicInterpretationViz primal={primal} dual={dual} />;
    case 'shadow-price-analysis':
      return <ShadowPricesViz primal={primal} dual={dual} />;
    
    // Theorem visualizations
    case 'weak-duality':
      return <WeakDualityViz primal={primal} dual={dual} />;
    case 'strong-duality':
      return <StrongDualityViz primal={primal} dual={dual} />;
    case 'complementary-slackness':
      return <ComplementaryViz primal={primal} dual={dual} />;
    
    // Legacy visualizations (keeping for compatibility)
    case 'primal-setup':
      return <PrimalSetupViz primal={primal} />;
    case 'dual-setup':
      return <DualSetupViz primal={primal} dual={dual} />;
    case 'equilibrium':
      return <EquilibriumViz primal={primal} dual={dual} />;
    default:
      return <div className="text-center text-gray-500">Visualization: {chapter.visualization}</div>;
  }
};

// Primal problem setup visualization
const PrimalSetupViz: React.FC<{ primal: LinearProgram }> = ({ primal }) => {
  return (
    <div className="space-y-4">
      <div className="text-center mb-4">
        <Factory className="w-16 h-16 text-blue-600 mx-auto mb-2" />
        <h4 className="font-semibold">Problema Primal</h4>
      </div>
      
      <div className="bg-white rounded-lg p-4 space-y-3">
        <div className="border-b pb-2">
          <p className="font-semibold text-sm text-gray-600">Objetivo:</p>
          <p className="font-mono">
            {primal.isMaximization ? 'MAX' : 'MIN'} z = {primal.objective.map((c, i) => `${c}${primal.variables[i]}`).join(' + ')}
          </p>
        </div>
        
        <div>
          <p className="font-semibold text-sm text-gray-600 mb-2">Restri√ß√µes:</p>
          {primal.constraints.map((constraint, i) => (
            <p key={i} className="font-mono text-sm">
              {constraint.coefficients.map((c, j) => `${c}${primal.variables[j]}`).join(' + ')} {constraint.operator} {constraint.rhs}
            </p>
          ))}
        </div>
        
        <div className="border-t pt-2">
          <p className="text-sm text-gray-600">
            {primal.variables.join(', ')} ‚â• 0
          </p>
        </div>
      </div>
    </div>
  );
};

// Dual problem setup visualization
const DualSetupViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal }) => {
  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div className="text-center">
          <Factory className="w-12 h-12 text-blue-600 mx-auto mb-2" />
          <h5 className="font-semibold text-sm">Primal</h5>
          <p className="text-xs text-gray-600">
            {primal.isMaximization ? 'Maximizar lucro' : 'Minimizar custo'}
          </p>
        </div>
        
        <div className="text-center">
          <DollarSign className="w-12 h-12 text-green-600 mx-auto mb-2" />
          <h5 className="font-semibold text-sm">Dual</h5>
          <p className="text-xs text-gray-600">
            {dual.isMaximization ? 'Maximizar valor' : 'Minimizar pre√ßo'}
          </p>
        </div>
      </div>
      
      <div className="bg-white rounded-lg p-4">
        <p className="font-semibold text-sm text-gray-600 mb-2">Vari√°veis Duais:</p>
        {dual.variables.map((v, i) => (
          <div key={i} className="flex justify-between text-sm">
            <span>{v}: pre√ßo da restri√ß√£o {i + 1}</span>
            <span className="text-gray-500">({primal.constraints[i].operator} {primal.constraints[i].rhs})</span>
          </div>
        ))}
      </div>
      
      <div className="bg-green-50 rounded-lg p-3 text-sm">
        <p className="font-semibold mb-1">Interpreta√ß√£o:</p>
        <p>Cada vari√°vel dual representa o "pre√ßo" ou "valor" de uma unidade do recurso correspondente.</p>
      </div>
    </div>
  );
};

// Shadow prices visualization
const ShadowPricesViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal }) => {
  // Mock shadow prices for visualization
  const shadowPrices = primal.constraints.map((_, i) => i < 2 ? 2.5 - i * 0.7 : 0);
  
  return (
    <div className="space-y-4">
      <div className="text-center mb-4">
        <TrendingUp className="w-16 h-16 text-purple-600 mx-auto mb-2" />
        <h4 className="font-semibold">Pre√ßos Sombra</h4>
      </div>
      
      {primal.constraints.map((constraint, i) => (
        <div key={i} className="bg-white rounded-lg p-4">
          <div className="flex justify-between items-center mb-2">
            <span className="font-semibold">Recurso {i + 1}</span>
            <span className={`text-lg font-bold ${shadowPrices[i] > 0 ? 'text-green-600' : 'text-gray-400'}`}>
              y{i + 1} = R$ {shadowPrices[i].toFixed(2)}
            </span>
          </div>
          
          <div className="space-y-1 text-sm">
            <div className="flex justify-between">
              <span>Dispon√≠vel:</span>
              <span>{constraint.rhs} unidades</span>
            </div>
            <div className="flex justify-between">
              <span>Tipo:</span>
              <span>{constraint.operator}</span>
            </div>
          </div>
          
          {shadowPrices[i] > 0 ? (
            <div className="mt-2 p-2 bg-green-50 rounded text-sm">
              <p className="text-green-800">
                ‚Üó Aumentar em 1 unidade ‚Üí Lucro +R$ {shadowPrices[i].toFixed(2)}
              </p>
            </div>
          ) : (
            <div className="mt-2 p-2 bg-gray-50 rounded text-sm">
              <p className="text-gray-600">
                Recurso abundante (tem folga)
              </p>
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

// Equilibrium visualization
const EquilibriumViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal, dual }) => {
  const optimalValue = 42; // Mock value
  
  return (
    <div className="space-y-4">
      <div className="text-center mb-4">
        <BarChart3 className="w-16 h-16 text-indigo-600 mx-auto mb-2" />
        <h4 className="font-semibold">Equil√≠brio Perfeito</h4>
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        <div className="bg-blue-50 rounded-lg p-4 text-center">
          <p className="text-sm text-blue-600 mb-1">Valor √ìtimo Primal</p>
          <p className="text-2xl font-bold text-blue-800">z* = {optimalValue}</p>
          <p className="text-xs text-blue-600 mt-1">
            {primal.isMaximization ? 'Lucro m√°ximo' : 'Custo m√≠nimo'}
          </p>
        </div>
        
        <div className="bg-green-50 rounded-lg p-4 text-center">
          <p className="text-sm text-green-600 mb-1">Valor √ìtimo Dual</p>
          <p className="text-2xl font-bold text-green-800">w* = {optimalValue}</p>
          <p className="text-xs text-green-600 mt-1">
            {dual.isMaximization ? 'Valor m√°ximo' : 'Pre√ßo m√≠nimo'}
          </p>
        </div>
      </div>
      
      <div className="bg-indigo-100 rounded-lg p-4 text-center">
        <p className="text-lg font-semibold text-indigo-900">
          z* = w* = {optimalValue}
        </p>
        <p className="text-sm text-indigo-700 mt-1">
          Teorema da Dualidade Forte
        </p>
      </div>
      
      <div className="text-sm text-gray-600 text-center">
        <p>No ponto √≥timo, os interesses opostos se equilibram perfeitamente.</p>
      </div>
    </div>
  );
};

// Complementary slackness visualization
const ComplementaryViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = () => {
  return (
    <div className="space-y-4">
      <div className="text-center mb-4">
        <Package className="w-16 h-16 text-orange-600 mx-auto mb-2" />
        <h4 className="font-semibold">Folga Complementar</h4>
      </div>
      
      <div className="bg-white rounded-lg p-4 space-y-3">
        <div className="border-b pb-3">
          <p className="font-semibold text-sm mb-2">Regra 1: Vari√°veis vs Restri√ß√µes Duais</p>
          <div className="space-y-2 text-sm">
            <div className="flex items-center justify-between p-2 bg-blue-50 rounded">
              <span>Se x‚ÇÅ {'>'} 0 (produzindo)</span>
              <span className="text-blue-700">‚Üí</span>
              <span>Restri√ß√£o dual ativa</span>
            </div>
            <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
              <span>Se restri√ß√£o dual tem folga</span>
              <span className="text-gray-700">‚Üí</span>
              <span>x‚ÇÅ = 0 (n√£o produz)</span>
            </div>
          </div>
        </div>
        
        <div>
          <p className="font-semibold text-sm mb-2">Regra 2: Restri√ß√µes vs Vari√°veis Duais</p>
          <div className="space-y-2 text-sm">
            <div className="flex items-center justify-between p-2 bg-green-50 rounded">
              <span>Se recurso totalmente usado</span>
              <span className="text-green-700">‚Üí</span>
              <span>y‚ÇÅ {'>'} 0 (tem valor)</span>
            </div>
            <div className="flex items-center justify-between p-2 bg-gray-50 rounded">
              <span>Se recurso tem sobra</span>
              <span className="text-gray-700">‚Üí</span>
              <span>y‚ÇÅ = 0 (sem valor)</span>
            </div>
          </div>
        </div>
      </div>
      
      <div className="bg-orange-50 rounded-lg p-3 text-sm text-center">
        <p className="font-semibold text-orange-800">Princ√≠pio: "Tudo ou Nada"</p>
        <p className="text-orange-700">Atividade econ√¥mica s√≥ ocorre onde h√° escassez</p>
      </div>
    </div>
  );
};

// Conversion Rules Visualization
const ConversionRulesViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal, dual }) => {
  return (
    <div className="space-y-4">
      <div className="bg-white rounded-lg p-4">
        <table className="w-full">
          <thead>
            <tr className="border-b">
              <th className="text-left p-2">Aspecto</th>
              <th className="text-center p-2">Primal</th>
              <th className="text-center p-2">Dual</th>
            </tr>
          </thead>
          <tbody>
            <tr className="border-b">
              <td className="p-2">Tipo de Problema</td>
              <td className="text-center p-2 font-bold text-blue-600">
                {primal.isMaximization ? 'MAXIMIZA√á√ÉO' : 'MINIMIZA√á√ÉO'}
              </td>
              <td className="text-center p-2 font-bold text-green-600">
                {dual.isMaximization ? 'MAXIMIZA√á√ÉO' : 'MINIMIZA√á√ÉO'}
              </td>
            </tr>
            <tr className="border-b">
              <td className="p-2">N√∫mero de Vari√°veis</td>
              <td className="text-center p-2">{primal.variables.length}</td>
              <td className="text-center p-2">{dual.variables.length}</td>
            </tr>
            <tr>
              <td className="p-2">N√∫mero de Restri√ß√µes</td>
              <td className="text-center p-2">{primal.constraints.length}</td>
              <td className="text-center p-2">{dual.constraints.length}</td>
            </tr>
          </tbody>
        </table>
      </div>
      
      <div className="bg-blue-50 rounded-lg p-3 text-sm">
        <p className="font-semibold mb-1">Princ√≠pio Fundamental:</p>
        <p>Vari√°veis primais ‚Üî Restri√ß√µes duais | Restri√ß√µes primais ‚Üî Vari√°veis duais</p>
      </div>
    </div>
  );
};

// Dual Variables Visualization
const DualVariablesViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal, dual }) => {
  return (
    <div className="space-y-4">
      <div className="bg-white rounded-lg p-4">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <h5 className="font-semibold mb-2 text-blue-600">Restri√ß√µes Primais</h5>
            {primal.constraints.map((c, i) => (
              <div key={i} className="mb-2 p-2 bg-blue-50 rounded text-sm">
                <p className="font-mono">
                  {c.coefficients.map((coef, j) => `${coef}${primal.variables[j]}`).join(' + ')} {c.operator} {c.rhs}
                </p>
              </div>
            ))}
          </div>
          
          <div>
            <h5 className="font-semibold mb-2 text-green-600">Vari√°veis Duais</h5>
            {dual.variables.map((v, i) => (
              <div key={i} className="mb-2 p-2 bg-green-50 rounded text-sm flex items-center justify-center">
                <p className="font-bold text-lg">{v}</p>
              </div>
            ))}
          </div>
        </div>
        
        <div className="mt-4 text-center">
          <ArrowRight className="w-8 h-8 text-gray-400 mx-auto" />
          <p className="text-sm text-gray-600 mt-1">
            Cada restri√ß√£o primal gera uma vari√°vel dual
          </p>
        </div>
      </div>
    </div>
  );
};

// Objective Conversion Visualization
const ObjectiveConversionViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal, dual }) => {
  return (
    <div className="space-y-4">
      <div className="bg-white rounded-lg p-4">
        <div className="mb-4">
          <h5 className="font-semibold mb-2">RHS das Restri√ß√µes Primais:</h5>
          <div className="flex gap-2">
            {primal.constraints.map((c, i) => (
              <div key={i} className="bg-blue-100 px-3 py-2 rounded">
                <p className="text-sm font-mono">b{i+1} = {c.rhs}</p>
              </div>
            ))}
          </div>
        </div>
        
        <div className="text-center my-4">
          <ArrowDown className="w-8 h-8 text-gray-400 mx-auto" />
        </div>
        
        <div>
          <h5 className="font-semibold mb-2">Fun√ß√£o Objetivo Dual:</h5>
          <div className="bg-green-100 p-3 rounded">
            <p className="font-mono text-lg">
              {dual.isMaximization ? 'MAX' : 'MIN'} w = {dual.objective.map((c, i) => `${c}y${i+1}`).join(' + ')}
            </p>
          </div>
        </div>
      </div>
      
      <div className="bg-yellow-50 rounded-lg p-3 text-sm">
        <p className="font-semibold">Interpreta√ß√£o:</p>
        <p>Os recursos dispon√≠veis (RHS) se tornam os "pre√ßos" a otimizar no dual</p>
      </div>
    </div>
  );
};

// Constraints Conversion Visualization
const ConstraintsConversionViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal, dual }) => {
  return (
    <div className="space-y-4">
      <div className="bg-white rounded-lg p-4">
        <h5 className="font-semibold mb-3">Matriz de Coeficientes Primal ‚Üí Restri√ß√µes Duais</h5>
        
        {primal.variables.map((v, j) => (
          <div key={j} className="mb-4 border rounded p-3">
            <p className="font-semibold text-sm mb-2">Coluna {j+1} (vari√°vel {v}):</p>
            
            <div className="flex items-center gap-3">
              <div className="flex flex-col gap-1">
                {primal.constraints.map((c, i) => (
                  <span key={i} className="bg-blue-100 px-2 py-1 rounded text-sm font-mono">
                    a{i+1},{j+1} = {c.coefficients[j]}
                  </span>
                ))}
              </div>
              
              <ArrowRight className="w-6 h-6 text-gray-400" />
              
              <div className="bg-green-100 p-2 rounded flex-1">
                <p className="font-mono text-sm">
                  {dual.constraints[j].coefficients.map((c, i) => `${c}y${i+1}`).join(' + ')} 
                  {' '}{dual.constraints[j].operator} {dual.constraints[j].rhs}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// Sign Rules Visualization
const SignRulesViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal }) => {
  return (
    <div className="space-y-4">
      <div className="bg-white rounded-lg p-4">
        <h5 className="font-semibold mb-3">Regras de Sinais e Restri√ß√µes</h5>
        
        <div className="space-y-3">
          {primal.constraints.map((c, i) => (
            <div key={i} className="flex items-center justify-between p-3 border rounded">
              <div className="text-sm">
                <p className="font-semibold">Restri√ß√£o {i+1}:</p>
                <p className="font-mono">{c.operator}</p>
              </div>
              
              <ArrowRight className="w-6 h-6 text-gray-400" />
              
              <div className="text-sm text-right">
                <p className="font-semibold">Vari√°vel dual y{i+1}:</p>
                <p className="font-mono">
                  {c.operator === '<=' ? '‚â• 0' : 
                   c.operator === '>=' ? '‚â§ 0' : 
                   'irrestrita'}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <div className="bg-gray-50 rounded-lg p-3 text-sm">
        <p className="font-semibold mb-2">Resumo para problema {primal.isMaximization ? 'MAX' : 'MIN'}:</p>
        <ul className="space-y-1">
          <li>‚Ä¢ Restri√ß√£o ‚â§ ‚Üí Vari√°vel dual ‚â• 0</li>
          <li>‚Ä¢ Restri√ß√£o ‚â• ‚Üí Vari√°vel dual ‚â§ 0</li>
          <li>‚Ä¢ Restri√ß√£o = ‚Üí Vari√°vel dual irrestrita</li>
        </ul>
      </div>
    </div>
  );
};

// Economic Interpretation Visualization
const EconomicInterpretationViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal, dual }) => {
  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div className="bg-blue-50 rounded-lg p-4">
          <Factory className="w-12 h-12 text-blue-600 mx-auto mb-2" />
          <h5 className="font-semibold text-center mb-2">Perspectiva Primal</h5>
          <p className="text-sm text-center">
            {primal.isMaximization ? 'Maximizar produ√ß√£o/lucro' : 'Minimizar custos'}
          </p>
        </div>
        
        <div className="bg-green-50 rounded-lg p-4">
          <DollarSign className="w-12 h-12 text-green-600 mx-auto mb-2" />
          <h5 className="font-semibold text-center mb-2">Perspectiva Dual</h5>
          <p className="text-sm text-center">
            {dual.isMaximization ? 'Maximizar valor dos recursos' : 'Minimizar pre√ßos de compra'}
          </p>
        </div>
      </div>
    </div>
  );
};

// Weak Duality Visualization
const WeakDualityViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = ({ primal, dual }) => {
  return (
    <div className="space-y-4">
      <div className="bg-white rounded-lg p-4">
        <div className="relative h-40">
          <div className="absolute left-0 top-0 bottom-0 w-1/3 bg-blue-50 rounded-l flex items-center justify-center">
            <div className="text-center">
              <p className="font-semibold text-blue-600">Primal</p>
              <p className="text-sm">{primal.isMaximization ? 'MAX' : 'MIN'}</p>
              <p className="font-mono mt-2">cx</p>
            </div>
          </div>
          
          <div className="absolute right-0 top-0 bottom-0 w-1/3 bg-green-50 rounded-r flex items-center justify-center">
            <div className="text-center">
              <p className="font-semibold text-green-600">Dual</p>
              <p className="text-sm">{dual.isMaximization ? 'MAX' : 'MIN'}</p>
              <p className="font-mono mt-2">yb</p>
            </div>
          </div>
          
          <div className="absolute inset-x-0 top-1/2 transform -translate-y-1/2">
            <p className="text-center text-2xl font-bold">
              {primal.isMaximization ? 'cx ‚â§ yb' : 'cx ‚â• yb'}
            </p>
          </div>
        </div>
      </div>
      
      <div className="bg-yellow-50 rounded-lg p-3 text-sm">
        <p className="font-semibold">Significado:</p>
        <p>{primal.isMaximization ? 
          'Qualquer solu√ß√£o dual vi√°vel fornece um limite superior para o primal' :
          'Qualquer solu√ß√£o dual vi√°vel fornece um limite inferior para o primal'}</p>
      </div>
    </div>
  );
};

// Strong Duality Visualization
const StrongDualityViz: React.FC<{ primal: LinearProgram; dual: LinearProgram }> = () => {
  return (
    <div className="space-y-4">
      <div className="bg-gradient-to-r from-blue-50 to-green-50 rounded-lg p-6">
        <div className="text-center">
          <p className="text-3xl font-bold mb-2">cx* = y*b</p>
          <p className="text-lg">No ponto √≥timo</p>
        </div>
        
        <div className="mt-4 grid grid-cols-2 gap-4">
          <div className="text-center">
            <p className="font-semibold text-blue-600">Valor √ìtimo Primal</p>
            <p className="text-2xl font-mono">z*</p>
          </div>
          <div className="text-center">
            <p className="font-semibold text-green-600">Valor √ìtimo Dual</p>
            <p className="text-2xl font-mono">w*</p>
          </div>
        </div>
      </div>
      
      <div className="bg-purple-50 rounded-lg p-3 text-sm">
        <p className="font-semibold">Implica√ß√£o Profunda:</p>
        <p>Resolver o primal √© equivalente a resolver o dual - ambos fornecem a mesma informa√ß√£o!</p>
      </div>
    </div>
  );
};

// Type definitions
interface Narrative {
  title: string;
  problemContext: string;
  chapters: Chapter[];
}

interface Chapter {
  title: string;
  subtitle: string;
  narrative: string;
  visualization: string;
  insight?: string;
}